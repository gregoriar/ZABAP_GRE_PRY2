managed implementation in class zbp_r_dt_inct_073 unique;
strict ( 2 ); //Asegura que el código cumple con la versión 2 del BDL (Behavior Definition Language)
with draft;

define behavior for ZR_DT_INCT_073 alias Incidents //alias <alias_name>
//implementation in class zbp_r_dt_inct_073 unique //Si quisieramos manejar una clase de implementación por cada entidad
persistent table zdt_inct_user073
draft table zdt_inct_d_073
lock master
total etag LastChangedAt
etag master LocalLastChangedAt
authorization master ( global, instance )

{
  //create ( authorization : global );
  create;
  update;
  delete;

  association _HistoryIncidents { create ( features: instance ); with draft; }

  field ( numbering : managed, readonly ) IncUuid;

  field ( readonly ) IncidentId,
  //Status,
  LocalCreatedBy,
  LocalCreatedAt,
  LocalLastChangedBy,
  LocalLastChangedAt,
  LastChangedAt;

  field ( mandatory ) Title, Description, Priority;
  // CreationDate,  ChangedDate;



  field ( features : instance ) Status; //Cambio de estado generará un metodo get_instance_features

  // action ( authorization : update ) changeStatus result [1] $self;

  action ( features : instance, authorization : update ) changeStatus
    parameter Z_ABST_STATUS_OBSE_073 result [1] $self;

  internal action reActStatusObservationHis;  //ES setDefaultHistory

  //validation
  //Priority Validation  Validation

  validation validatePriority on save { create; field Priority; }     //Rev. in my App RAP. Se disparan las validaciones tanto en el evento de creacion como de guardado


  // determination setDefaultValuesInct on save { create; } //Se dispara al momento de grabar un nuevo registro cuando se está creando y lo gyardamos
  //Se asignan los valores iniciales como el IncidentID,  Status y la fecha de creación de la incidencia

  determination setDefaultValuesInct on modify { create; } //PRUEBA
  determination setdefaulthistory on save { create; }      // Se registran los valores en el Histórico

  determine action validatePriorityID { validation validatePriority; }


  side effects
  { //field status affects field   //Cómo plantear la actualización de la vista dependiente
    determine action validatePriorityID executed on field Priority affects messages;

  }

  draft action Resume;
  draft action Edit;
  draft action Activate optimized;
  draft action Discard;

  draft determine action Prepare
  {
    validation validatePriority;
//    validation validateDates;
  }

  mapping for zdt_inct_user073
    {
      IncUuid            = inc_uuid;
      IncidentId         = incident_id;
      Title              = title;
      Description        = description;
      Status             = status;
      Priority           = priority;
      CreationDate       = creation_date;
      ChangedDate        = changed_date;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    } //Mapeo de la tabla zdt_inct_user073

}

// Behavior Definition for ZDD_INCT_H_073

define behavior for ZDD_INCT_H_073 alias HistoryIncidents //alias <alias_name>
persistent table zdt_inct_h_073
draft table zdt_inct_h_d_073
//lock master
lock dependent by _IncidentsMain
authorization dependent by _IncidentsMain
//etag master <field_name>
{
  update;
  delete;
  association _IncidentsMain { with draft; }

  field ( numbering : managed, readonly ) HisUuid;

  field ( readonly ) IncUuid, HisId, PreviousStatus, Text,
  LocalCreatedBy, LocalCreatedAt, LocalLastChangedBy,
  LocalLastChangedAt, LastChangedAt;


//    draft action Resume;
//    draft action Edit;
//    draft action Activate optimized;
//    draft action Discard;

  mapping for zdt_inct_h_073
    {
      HisUuid            = his_uuid;
      IncUuid            = inc_uuid;
      HisId              = his_id;
      PreviousStatus     = previous_status;
      NewStatus          = new_status;
      Text               = text;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    }



}